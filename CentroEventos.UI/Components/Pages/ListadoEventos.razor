@page "/listadoEventosTotales/"
<PageTitle>Listado de eventos totales</PageTitle>

@rendermode InteractiveServer
@inject NavigationManager Navegador;
@inject ListarEventosDeportivosUseCase ListarEventosDeportivosUseCase
@inject EventoDeportivoBajaUseCase EventoDeportivoBajaUseCase 

<DialogoConfirmacion @ref="dialogo" OnConfirmado="Eliminar" />
@inject UsuarioLogueadoUseCase UsuarioLogueadoUseCase
@inject PoseeElPermisoUseCase PoseeElPermisoUseCase 
@inject UsuarioActualUseCase UsuarioActualUseCase 

<Sidebar />
<Header />

<div class="contenedor-tabla">

@if (!string.IsNullOrEmpty(_mensajeError))
{
    <div class="overlay">
        <div class="modal-error">
            <p>@_mensajeError</p>
            <button class="btn btn-light" @onclick="() => _mensajeError = null">Aceptar</button>
        </div>
    </div>
}
    <h2 class="titulo-tabla">Listado de eventos totales</h2>

    <table class="table tabla-estilo">
        <thead>
            <tr>
                <th>ID DEL EVENTO</th>
                <th>NOMBRE</th>
                <th>DESCRIPCIÓN</th>
                <th>FECHA Y HORA DE INICIO</th>
                <th>DURACIÓN (hs)</th>
                <th>CUPO MÁXIMO</th>
                <th>RESPONSABLE ID</th>

@if ((_puedeModificarEvento) || (_puedeEliminarEvento)) 
{
    <th>ACCIÓN</th>
}
            </tr>
        </thead>
        <tbody>
            @foreach (var evento in listaEventos)
            {
                <tr>
                    <td>@evento.Id</td>
                    <td>@evento.Nombre</td>
                    <td>@evento.Descripcion</td>
                    <td>@evento.FechaHoraInicio</td>
                    <td>@evento.DuracionHoras</td>
                    <td>@evento.CupoMaximo</td>
                    <td>@evento.ResponsableId</td>
                    <td>
                        <div class="botones-accion">

                            @if (_puedeModificarEvento) 
                            {
                            <button class="btn btn-primary" @onclick="() => Modificar(evento)">Editar</button>
                            }
                            @if (_puedeEliminarEvento) 
                            {
                              <button class="btn btn-danger" @onclick="() => ConfirmarEliminacion(evento)">Eliminar</button>
                            }
                           
                        </div> 
                        
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    .contenedor-tabla {
        max-width: 90%;
        margin: 30px auto;
        padding: 20px;
         margin-left: 60px auto;
        padding-left: 210px;
        background-color: #fefefe;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .titulo-tabla {
        text-align: center;
        margin-bottom: 20px;
    }

    .tabla-estilo th,
    .tabla-estilo td {
        padding: 12px 16px;
        text-align: center;
        vertical-align: middle;
    }

    .tabla-estilo th {
        background-color: #f0f0f0;
    }

    .botones-accion {
        display: flex;
        justify-content: center;
        gap: 10px;
    }

    .btn {
        min-width: 90px;
    }
.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 1000;
    display: flex;
    justify-content: center;
    align-items: center;
}

.modal-error {
    background-color: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.25);
    text-align: center;
    max-width: 400px;
}

.modal-error p {
    color: #000000;
    font-weight: bold;
    margin-bottom: 20px;
    font-size: 1.1rem;
}

.modal-error button {
    padding: 10px 20px;
    font-size: 1rem;
    border-radius: 6px;
    border: none;
    background-color: #3498db;
    color: white;
    cursor: pointer;
}

.modal-error button:hover {
    background-color: #2980b9;
}
</style>

@code {
    List<EventoDeportivo> listaEventos = new List<EventoDeportivo>();
    string _mensajeError = "";
    int _idActualUsuario;
    bool _puedeModificarEvento = false;
    bool _puedeEliminarEvento = false;
    DialogoConfirmacion dialogo = null!;
    EventoDeportivo? _eventoParaEliminar = null;

    private void ConfirmarEliminacion(EventoDeportivo evento)
    {
        _eventoParaEliminar = evento;
        dialogo.Mensaje = $"¿Desea eliminar el evento {evento.Nombre}?";
        dialogo.Mostrar();
    }

    private void Eliminar()
    {
      try
      {
        if (_eventoParaEliminar != null)
        {
            EventoDeportivoBajaUseCase.Ejecutar(_eventoParaEliminar.Id, _idActualUsuario);
            Navegador.NavigateTo("/listadoEventos");
        }
      }
      catch (Exception ex)
      {
        _mensajeError = ex.Message;
      }
    }

    void Modificar(EventoDeportivo evento)
    {
        Navegador.NavigateTo($"/evento/{evento.Id}");
    }

    protected override void OnInitialized()
    {
        listaEventos = ListarEventosDeportivosUseCase.Ejecutar();

        if (UsuarioLogueadoUseCase.Ejecutar()) {
            
            _idActualUsuario = (UsuarioActualUseCase.Ejecutar()).Id;
            _puedeModificarEvento = PoseeElPermisoUseCase.Ejecutar(_idActualUsuario, IServicioAutorizacion.Permisos.EventoModificacion);
            _puedeEliminarEvento = PoseeElPermisoUseCase.Ejecutar(_idActualUsuario, IServicioAutorizacion.Permisos.EventoBaja);

        }

    }    

}